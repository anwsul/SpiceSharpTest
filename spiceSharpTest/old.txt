using SpiceSharp;
using SpiceSharp.Components;

class ThreePhaseTransformerEquivalentModel
{
    // --- Equivalent Circuit Parameters (per phase, referred to primary unless noted) ---
    // These are example values and should be adjusted based on the actual transformer design
    // or measurements (e.g., from open-circuit and short-circuit tests).
    static double primaryResistance = 0.01;      // Ohms (R_p) - Primary winding resistance
    static double secondaryResistance = 0.005;   // Ohms (R_s) - Secondary winding resistance (referred to its own side)
    static double primaryLeakageInductance = 1e-4; // H (L_lp) - Primary leakage inductance
    static double secondaryLeakageInductance = 2.5e-5; // H (L_ls) - Secondary leakage inductance (referred to its own side)
    static double magnetizingInductance = 100;   // H (L_m) - Magnetizing inductance (referred to primary side)
    static double coreLossResistance = 1e5;      // Ohms (R_c) - Core loss resistance (representing hysteresis and eddy currents, referred to primary side)
    static double turnsRatio_Np_Ns = 20;         // N_p / N_s - Primary to Secondary turns ratio

    /// <summary>
    /// Creates a SubcircuitDefinition for a three-phase transformer using a simplified
    /// equivalent circuit model with independent phases.
    /// The model includes winding resistance, leakage inductance, magnetizing inductance,
    /// and core loss resistance, mapped to SpiceSharp components.
    /// The coupling is handled by calculating the total inductances and coupling factor
    /// based on the equivalent circuit parameters.
    /// </summary>
    /// <returns>A SubcircuitDefinition representing the three-phase transformer equivalent circuit.</returns>
    public static SubcircuitDefinition CreateThreePhaseEquivalentTransformer()
    {
        // --- Calculations for SpiceSharp parameters (per phase) ---
        // We need to map the equivalent circuit parameters (L_lp, L_ls, L_m, n)
        // to the total primary/secondary inductances (L_p_total, L_s_total)
        // and the coupling factor (k) required by the SpiceSharp MutualInductance component.

        // Total primary self-inductance for SpiceSharp MutualInductance component
        // This is the sum of primary leakage and magnetizing inductances.
        double L_p_total = primaryLeakageInductance + magnetizingInductance;

        // Total secondary self-inductance for SpiceSharp MutualInductance component
        // This is the sum of secondary leakage inductance and the magnetizing inductance
        // referred to the secondary side.
        double L_m_referred_to_secondary = magnetizingInductance / (turnsRatio_Np_Ns * turnsRatio_Np_Ns);
        double L_s_total = secondaryLeakageInductance + L_m_referred_to_secondary;

        // The mutual inductance (M) between the primary and secondary windings,
        // referred to the primary side, is equal to the magnetizing inductance (L_m).
        // However, the MutualInductance component couples the *total* inductances.
        // The mutual inductance value used in the definition M = k * sqrt(L_p_total * L_s_total)
        // should be related to the magnetizing inductance and turns ratio.
        // The mutual inductance M between the two *total* inductors L_p_total and L_s_total
        // that correctly represents the coupling of the magnetizing flux is given by:
        // M = sqrt(L_m_primary_side * L_m_referred_to_secondary) = sqrt(magnetizingInductance * (magnetizingInductance / n^2)) = magnetizingInductance / n
        double mutualInductanceValue = magnetizingInductance / turnsRatio_Np_Ns;

        // Calculate the coupling factor 'k' for the MutualInductance component
        // k = M / sqrt(L_p_total * L_s_total)
        double couplingFactor = mutualInductanceValue / Math.Sqrt(L_p_total * L_s_total);

        // --- Build the internal circuit for the subcircuit ---
        var internalCircuit = new Circuit(
            // --- Phase A ---
            // Primary side equivalent circuit elements (Resistance, Total Inductance, Core Loss)
            // R_p in series with (L_p_total || R_c)
            new Resistor("R1p", "P1_pin", "P1_mid", primaryResistance),
            new Inductor("L1_ptotal", "P1_mid", "NP_pin", L_p_total),
            new Resistor("R1c", "P1_mid", "NP_pin", coreLossResistance),

            // Secondary side equivalent circuit elements (Resistance, Total Inductance)
            // R_s in series with L_s_total
            new Resistor("R1s", "S1_pin", "S1_mid", secondaryResistance),
            new Inductor("L1_stotal", "S1_mid", "NS_pin", L_s_total),

            // Mutual Inductance coupling Phase A primary and secondary total inductances
            // This component couples the flux between L1_ptotal and L1_stotal with factor 'k'
            new MutualInductance("K1", "L1_ptotal", "L1_stotal", couplingFactor),

            // --- Phase B ---
            // Primary side equivalent circuit elements
            new Resistor("R2p", "P2_pin", "P2_mid", primaryResistance),
            new Inductor("L2_ptotal", "P2_mid", "NP_pin", L_p_total),
            new Resistor("R2c", "P2_mid", "NP_pin", coreLossResistance),

            // Secondary side equivalent circuit elements
            new Resistor("R2s", "S2_pin", "S2_mid", secondaryResistance),
            new Inductor("L2_stotal", "S2_mid", "NS_pin", L_s_total),

            // Mutual Inductance coupling Phase B primary and secondary total inductances
            new MutualInductance("K2", "L2_ptotal", "L2_stotal", couplingFactor),

            // --- Phase C ---
            // Primary side equivalent circuit elements
            new Resistor("R3p", "P3_pin", "P3_mid", primaryResistance),
            new Inductor("L3_ptotal", "P3_mid", "NP_pin", L_p_total),
            new Resistor("R3c", "P3_mid", "NP_pin", coreLossResistance), // Corrected node name from R3_mid to P3_mid

            // Secondary side equivalent circuit elements
            new Resistor("R3s", "S3_pin", "S3_mid", secondaryResistance),
            new Inductor("L3_stotal", "S3_mid", "NS_pin", L_s_total),

            // Mutual Inductance coupling Phase C primary and secondary total inductances
            new MutualInductance("K3", "L3_ptotal", "L3_stotal", couplingFactor)
        );

        // Define pins: These are the external connection points of the subcircuit.
        // Internal nodes like "P1_mid", "S1_mid" are internal to the subcircuit and NOT pins.
        return new SubcircuitDefinition(internalCircuit,
            "P1_pin", "P2_pin", "P3_pin",  // Primary phase pins (A, B, C)
            "S1_pin", "S2_pin", "S3_pin",  // Secondary phase pins (A, B, C)
            "NP_pin",                      // Primary neutral pin
            "NS_pin"                       // Secondary neutral pin
        );
    }

    // Example of how to use this subcircuit in a larger circuit
    /*
    public static void Main(string[] args)
    {
        // Create an instance of the three-phase transformer subcircuit
        // The parameters after the subcircuit definition name ("MyTransformer") are the
        // external nodes that will connect to the pins defined in the SubcircuitDefinition.
        var threePhaseXFMR = new Subcircuit("MyTransformer",
            ThreePhaseTransformerEquivalentModel.CreateThreePhaseEquivalentTransformer(),
            "PriA_Conn", "PriB_Conn", "PriC_Conn", // External nodes for primary phases
            "SecA_Conn", "SecB_Conn", "SecC_Conn", // External nodes for secondary phases
            "PriNeutral_Conn",                     // External node for primary neutral
            "SecNeutral_Conn"                      // External node for secondary neutral
        );

        // Create a main circuit and add the transformer instance
        var mainCircuit = new Circuit();
        mainCircuit.Add(threePhaseXFMR);

        // Add other components like voltage sources, loads, etc. to the mainCircuit,
        // connecting them to the external nodes defined for the transformer instance.
        // For example, connecting a wye-connected primary to three phase voltages:
        // mainCircuit.Add(new Sine("V_PriA", "PriA_Conn", "PriNeutral_Conn", 0, 120 * Math.Sqrt(2), 60)); // 120V RMS, 60Hz, 0 deg phase
        // mainCircuit.Add(new Sine("V_PriB", "PriB_Conn", "PriNeutral_Conn", 0, 120 * Math.Sqrt(2), 60, 120)); // 120V RMS, 60Hz, 120 deg phase
        // mainCircuit.Add(new Sine("V_PriC", "PriC_Conn", "PriNeutral_Conn", 0, 120 * Math.Sqrt(2), 60, 240)); // 120V RMS, 60Hz, 240 deg phase

        // Connecting a wye-connected secondary load:
        // mainCircuit.Add(new Resistor("LoadA", "SecA_Conn", "SecNeutral_Conn", 100)); // Example load on Phase A
        // mainCircuit.Add(new Resistor("LoadB", "SecB_Conn", "SecNeutral_Conn", 100)); // Example load on Phase B
        // mainCircuit.Add(new Resistor("LoadC", "SecC_Conn", "SecNeutral_Conn", 100)); // Example load on Phase C

        // Setup and run simulation (e.g., AC analysis, Transient analysis)
        // You would then configure and run the desired analysis type (e.g., AC, Transient)
        // using the Simulation class in SpiceSharp.
        // Example (simplified AC analysis setup):
        // var acSim = new AC("AC Simulation", new DecadeSweep(1, 1E3, 10)); // Sweep from 1Hz to 1kHz, 10 points per decade
        // acSim.Run(mainCircuit);
        // Access results: acSim.GetComplexVoltage("SecA_Conn"); etc.
    }
    */
}
